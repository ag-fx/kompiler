buildscript {
    ext.kotlin_version = "1.3.61"
    ext.tornadofx_version = "1.7.18"
    ext.junit_version = "5.1.0"
    ext.koin_version = "2.0.0"
    ext.rxkotlin_version = "2.4.0"

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.1.0"
        classpath "de.dynamicfiles.projects.gradle.plugins:javafx-gradle-plugin:8.8.2"
        classpath 'org.openjfx:javafx-plugin:0.0.7'
    }
}

apply plugin: 'idea'
apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: 'javafx-gradle-plugin'
apply plugin: 'org.openjfx.javafxplugin'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

javafx {
    version = "12.0.1"
    modules = ["javafx.controls", "javafx.fxml", "javafx.base", "javafx.graphics"]
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // TornadoFX
    compile "no.tornado:tornadofx:$tornadofx_version"

    // Material design
    compile 'com.jfoenix:jfoenix:9.0.8'
    compile "com.github.bkenn:kfoenix:0.1.3"

    compile 'org.controlsfx:controlsfx:9.0.0'
    // FontAwesome
    compile 'de.jensd:fontawesomefx-commons:9.1.2'
    compile 'de.jensd:fontawesomefx-controls:9.1.2'
    compile 'de.jensd:fontawesomefx-emojione:3.1.1-9.1.2'
    compile 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'
    compile 'de.jensd:fontawesomefx-icons525:4.2.0-9.1.2'
    compile 'de.jensd:fontawesomefx-materialdesignfont:2.0.26-9.1.2'
    compile 'de.jensd:fontawesomefx-materialicons:2.2.0-9.1.2'

    // RxJava & RxKotlin
    compile "io.reactivex.rxjava3:rxjava:3.0.0"
    compile "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    compile "io.reactivex.rxjava2:rxjavafx:2.2.2"

    // Koin for Kotlin
    compile "org.koin:koin-core:$koin_version"
    compile "org.koin:koin-core-ext:$koin_version"

    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

mainClassName = "app.MyApp"

sourceSets {
    main {
        java {
            srcDirs = ['src/main/kotlin']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

jfx {
    verbose = true
    mainClass = "app.MyApp"
    useEnvironmentRelativeExecutables = true
    libFolderName = "lib"

    // gradle jfxJar
    css2bin = false
    preLoader = null // String
    updateExistingJar = false
    allPermissions = true
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = true
    skipCopyingDependencies = false
    useLibFolderContentForManifestClasspath = false

    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
    checkForAbsolutePaths = false
}

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(" "),
                "Main-Class": mainClassName
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}
